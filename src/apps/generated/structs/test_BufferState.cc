/**
 * \file
 * \brief Generated by ifgen (3.3.1).
 */

#ifdef NDEBUG
#undef NDEBUG
#endif

#include "generated/structs/BufferState.h"
#include <cassert>
#include <cstring>
#include <iostream>

void test_BufferState_encode_decode_basic(std::endian endianness)
{
    using namespace Coral;

    BufferState src = {};
    assert(src.span().size() == BufferState::size);

    src.swap();

    /* Eventually, we could assign member values here. */

    BufferState::Buffer buffer;
    assert(src.encode(&buffer, endianness) == BufferState::size);

    BufferState dst;
    assert(dst.decode(&buffer, endianness) == BufferState::size);
    assert(src == dst);

    /* Verify the values transferred. */

    /* Test stream interactions. */
    static constexpr std::size_t len = 10;
    byte_array<BufferState::size * len> streambuf;
    using TestSpan = byte_span<BufferState::size * len>;
    auto stream = byte_spanstream(TestSpan(streambuf));

    stream << dst;
    stream.seekg(0);

    BufferState from_stream;
    stream >> from_stream;
}

/**
 * A unit test for structs BufferState.
 *
 * \return 0 on success.
 */
int main(void)
{
    using namespace Coral;

    test_BufferState_encode_decode_basic(std::endian::native);
    test_BufferState_encode_decode_basic(std::endian::little);
    test_BufferState_encode_decode_basic(std::endian::big);

    return 0;
}
